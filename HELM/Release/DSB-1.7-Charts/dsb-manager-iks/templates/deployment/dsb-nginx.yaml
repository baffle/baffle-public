apiVersion: apps/v1
kind: Deployment
metadata:
  name: dsb-nginx
  labels:
    app: dsb-nginx
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: dsb-nginx
  template:
    metadata:
      labels:
        app: dsb-nginx
    spec:
      securityContext:
        fsGroup: 5000
        runAsUser: 5000
      volumes:
        - name: dsb-manager-certs
          secret:
            secretName: dsb-manager-certs
        - name: dsb-ca
          secret:
            secretName: dsb-ca
      containers:
      - name: nginx
        image: "{{ .Values.dsbNginx.image }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          capabilities:
            drop: ["ALL"]
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - name: dsb-manager-certs
          mountPath: /etc/nginx/ssl/bafflecert.pem
          subPath: dsbmanager.crt
        - name: dsb-manager-certs
          mountPath: /etc/nginx/ssl/bafflekey.pem
          subPath: dsbmanager.key
        - name: dsb-ca
          mountPath: /etc/nginx/ssl/clientca.pem
          subPath: dsbca.crt
        env:
        - name: BM_IP
          value: dsb-manager
        - name: BM_URL
          value: "http://dsb-manager:{{ .Values.dsbManager.service.port }}"
        - name: WEB_URL
          value: "http://dsb-web:{{ .Values.dsbWeb.service.port }}"
        command: ["/bin/sh"]
        args: ["-c", "envsubst '$${BM_IP},$${BM_URL},$${WEB_URL}' < /etc/nginx/nginx.conf.template_mtls > /etc/nginx/nginx.conf && nginx -g 'daemon off;'"]
      imagePullSecrets:
      - name: {{ .Values.image.pullSecrets }}

AWSTemplateFormatVersion: "2010-09-09"
Description: "Create a resources needed for Baffle Data Protection for Data Proxy"


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
            default: "Baffle Data Protection for Data Proxy Workflow"
        Parameters:
          - Workflow
      - Label:
          default: "Baffle Manager credential"
        Parameters:
          - UserEmail
          - UserPassword
      - Label:
          default: "User IP to whitelist (https://checkip.amazonaws.com)"
        Parameters:
          - MyIP
Parameters:
  Workflow:
    Description: "Select workflow to create required resources"
    Type: String
    Default: "Standard"
    AllowedValues:
      - "Standard"
      - "BYOK"
      - "ALL"

  UserEmail:
    Description: "Email for Baffle Manage and PGAdmin UI user"
    Type: String

  UserPassword:
    Description: "Password for Baffle Manage and PGAdmin UI user"
    Type: String
    NoEcho: true

  MyIP:
    Description: "User IP to be whitelisted"
    Type: String

Conditions:
  IsAll: !Equals
    - !Ref Workflow
    - "ALL"

  IsBYOK: !Equals
    - !Ref Workflow
    - "BYOK"

  CreateMultipleKeys: !Or
    - !Condition IsAll
    - !Condition IsBYOK

Mappings:
  RegionMap:
    us-east-1:
      ImageId: ami-03bed54099a2b8319
    us-east-2:
      ImageId: ami-xxxxxxxxxxxxxxxxx
    us-west-1:
      ImageId: ami-xxxxxxxxxxxxxxxxx
    us-west-2:
      ImageId: ami-xxxxxxxxxxxxxxxxx
    af-south-1:
      ImageId: ami-xxxxxxxxxxxxxxxxx
    ap-east-1:
      ImageId: ami-xxxxxxxxxxxxxxxxx
    ap-south-1:
      ImageId: ami-xxxxxxxxxxxxxxxxx
    ap-south-2:
      ImageId: ami-xxxxxxxxxxxxxxxxx
    ap-southeast-1:
      ImageId: ami-xxxxxxxxxxxxxxxxx
    ap-southeast-2:
      ImageId: ami-xxxxxxxxxxxxxxxxx
    ap-southeast-3:
      ImageId: ami-xxxxxxxxxxxxxxxxx
    ap-northeast-1:
      ImageId: ami-xxxxxxxxxxxxxxxxx
    ap-northeast-2:
      ImageId: ami-xxxxxxxxxxxxxxxxx
    ap-northeast-3:
      ImageId: ami-xxxxxxxxxxxxxxxxx
    ca-central-1:
      ImageId: ami-xxxxxxxxxxxxxxxxx
    eu-central-1:
      ImageId: ami-xxxxxxxxxxxxxxxxx
    eu-central-2:
      ImageId: ami-xxxxxxxxxxxxxxxxx
    eu-west-1:
      ImageId: ami-xxxxxxxxxxxxxxxxx
    eu-west-2:
      ImageId: ami-xxxxxxxxxxxxxxxxx
    eu-west-3:
      ImageId: ami-xxxxxxxxxxxxxxxxx
    eu-south-1:
      ImageId: ami-xxxxxxxxxxxxxxxxx
    eu-south-2:
      ImageId: ami-xxxxxxxxxxxxxxxxx
    eu-north-1:
      ImageId: ami-xxxxxxxxxxxxxxxxx
    me-central-1:
      ImageId: ami-xxxxxxxxxxxxxxxxx
    sa-east-1:
      ImageId: ami-xxxxxxxxxxxxxxxxx
Resources:
  BaffleVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W60
            reason: "Enabling flow log requires a lot of resource. This is out of scope."

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref BaffleVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref BaffleVPC

  DefaultPublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref BaffleVPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Select [ 0, Fn::GetAZs: !Ref "AWS::Region" ]

  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref BaffleVPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: !Select [ 1, Fn::GetAZs: !Ref "AWS::Region" ]

  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref BaffleVPC
      CidrBlock: "10.0.3.0/24"
      AvailabilityZone: !Select [ 0, Fn::GetAZs: !Ref "AWS::Region" ]

  PublicSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  BaffleDataStorageBucket:
    Type: "AWS::S3::Bucket"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W51
            reason: "The policy is controlled by ec2 instance policy, so no need os s3 bucket policy"
          - id: W35
            reason: "The access logging will require additional s3 bucket to log"
          - id: W41
            reason: "The data encryption key are encrypted"

  BaffleKeyStorageBucket:
    Type: "AWS::S3::Bucket"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W51
            reason: "The policy is controlled by ec2 instance policy, so no need os s3 bucket policy"
          - id: W35
            reason: "The access logging will require additional s3 bucket to log"
          - id: W41
            reason: "The data controlled by policy is encrypted"

  DeleteBucketLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-DeleteBucketLambdaFunction'
      RetentionInDays: 3
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: "This is for function that deletes files on s3. Don't need to encrypt it."

  DeleteBucketLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: LoggingPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !GetAtt DeleteBucketLambdaLogGroup.Arn
        - PolicyName: S3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:List*"
                  - "s3:DeleteObject"
                Resource:
                  - !Join [ "", [ "arn:aws:s3:::", !Ref BaffleKeyStorageBucket ] ]
                  - !Join [ "", [ "arn:aws:s3:::", !Ref BaffleKeyStorageBucket, "/*" ] ]
                  - !Join [ "", [ "arn:aws:s3:::", !Ref BaffleDataStorageBucket ] ]
                  - !Join [ "", [ "arn:aws:s3:::", !Ref BaffleDataStorageBucket, "/*" ] ]

  DeleteBucketLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          
          def handler(event, context):
              print(event)
              responseData = {}
              ResponseStatus = cfnresponse.SUCCESS
              s3bucketName = event['ResourceProperties']['s3bucketName']
      
              if event['RequestType'] == 'Delete':
                  # Need to empty the S3 bucket before it is deleted
                  s3 = boto3.resource('s3')
                  bucket = s3.Bucket(s3bucketName)
                  bucket.objects.all().delete()
          
                  responseData['Message'] = "Resource deletion successful!"
          
              cfnresponse.send(event, context, ResponseStatus, responseData)

      Handler: index.handler
      Runtime: python3.9
      Role: !GetAtt DeleteBucketLambdaExecutionRole.Arn
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "The deploying in VPC will require additional resources, which is overkill for simple job it does"
          - id: W92
            reason: "ReservedConcurrentExecutions is not needed as this just empties the bucket"

  BaffleDataStorageBucketDeleteCustomResource:
    Type: "Custom::CustomResource"
    Properties:
      ServiceToken: !GetAtt DeleteBucketLambdaFunction.Arn
      s3bucketName: !Ref BaffleDataStorageBucket

  BaffleKeyStorageBucketDeleteCustomResource:
    Type: "Custom::CustomResource"
    Properties:
      ServiceToken: !GetAtt DeleteBucketLambdaFunction.Arn
      s3bucketName: !Ref BaffleKeyStorageBucket

  BaffleShieldRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: DEKBucketAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                  - "s3:GetBucketPolicy"
                Resource:
                  - !Join [ "", [ "arn:aws:s3:::", !Ref BaffleKeyStorageBucket ] ]
                  - !Join [ "", [ "arn:aws:s3:::", !Ref BaffleKeyStorageBucket, "/*" ] ]
        - PolicyName: DataBucketAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                  - "s3:GetBucketPolicy"
                Resource:
                  - !Join [ "", [ "arn:aws:s3:::", !Ref BaffleDataStorageBucket ] ]
                  - !Join [ "", [ "arn:aws:s3:::", !Ref BaffleDataStorageBucket, "/*" ] ]

  BaffleShield1Key:
    Type: "AWS::KMS::Key"
    Properties:
      Description: "Baffle AWS Key"
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: "Enable IAM User Permissions"
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: "kms:*"
            Resource: "*"
          - Sid: "Allow use of the key by role"
            Effect: Allow
            Principal:
              AWS: !GetAtt BaffleShieldRole.Arn
            Action:
              - "kms:ListAliases"
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: "*"
          - Sid: "Allow attachment of persistent resources"
            Effect: Allow
            Principal:
              AWS: !GetAtt BaffleShieldRole.Arn
            Action:
              - "kms:CreateGrant"
              - "kms:ListGrants"
              - "kms:RevokeGrant"
            Resource: "*"
            Condition:
              Bool:
                "kms:GrantIsForAWSResource": "true"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F19
            reason: "Keys are temporary and is deleted right away on template tear down"

  BaffleShield1KeyAlias:
    Type: "AWS::KMS::Alias"
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-baffle-shield-key-1"
      TargetKeyId: !Ref BaffleShield1Key

  BaffleShield2Key:
    Type: "AWS::KMS::Key"
    Condition: CreateMultipleKeys
    Properties:
      Description: "Baffle AWS Key"
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: "Enable IAM User Permissions"
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: "kms:*"
            Resource: "*"
          - Sid: "Allow use of the key by role"
            Effect: Allow
            Principal:
              AWS: !GetAtt BaffleShieldRole.Arn
            Action:
              - "kms:ListAliases"
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: "*"
          - Sid: "Allow attachment of persistent resources"
            Effect: Allow
            Principal:
              AWS: !GetAtt BaffleShieldRole.Arn
            Action:
              - "kms:CreateGrant"
              - "kms:ListGrants"
              - "kms:RevokeGrant"
            Resource: "*"
            Condition:
              Bool:
                "kms:GrantIsForAWSResource": "true"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F19
            reason: "Keys are temporary and is deleted right away on template tear down"

  BaffleShield2KeyAlias:
    Type: "AWS::KMS::Alias"
    Condition: CreateMultipleKeys
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-baffle-shield-key-2"
      TargetKeyId: !Ref BaffleShield2Key

  BaffleShield3Key:
    Type: "AWS::KMS::Key"
    Condition: CreateMultipleKeys
    Properties:
      Description: "Baffle AWS Key"
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: "Enable IAM User Permissions"
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: "kms:*"
            Resource: "*"
          - Sid: "Allow use of the key by role"
            Effect: Allow
            Principal:
              AWS: !GetAtt BaffleShieldRole.Arn
            Action:
              - "kms:ListAliases"
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: "*"
          - Sid: "Allow attachment of persistent resources"
            Effect: Allow
            Principal:
              AWS: !GetAtt BaffleShieldRole.Arn
            Action:
              - "kms:CreateGrant"
              - "kms:ListGrants"
              - "kms:RevokeGrant"
            Resource: "*"
            Condition:
              Bool:
                "kms:GrantIsForAWSResource": "true"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F19
            reason: "Keys are temporary and is deleted right away on template tear down"

  BaffleShield3KeyAlias:
    Type: "AWS::KMS::Alias"
    Condition: CreateMultipleKeys
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-baffle-shield-key-3"
      TargetKeyId: !Ref BaffleShield3Key


  BaffleEC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security group with specific ports open"
      SecurityGroupIngress:
        - Description: Allow HTTPS traffic
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Join [ "", [ !Ref MyIP, "/32" ] ]
        - Description: Allow HTTPS traffic internally
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !GetAtt BaffleVPC.CidrBlock
        - Description: Allow Data Proxy traffic
          IpProtocol: tcp
          FromPort: 8444
          ToPort: 8444
          CidrIp: !Join [ "", [ !Ref MyIP, "/32" ] ]
        - Description: Allow Data Proxy traffic
          IpProtocol: tcp
          FromPort: 8445
          ToPort: 8445
          CidrIp: !Join [ "", [ !Ref MyIP, "/32" ] ]
      SecurityGroupEgress:
        - Description: Allow all outbound traffic to user
          IpProtocol: "-1"
          CidrIp: !Join [ "", [ !Ref MyIP, "/32" ] ]
        - Description: Allow all outbound traffic to user
          IpProtocol: "-1"
          CidrIp: !GetAtt BaffleVPC.CidrBlock
        - Description: Allow 443 to outside, needed to download script from github
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      VpcId: !Ref BaffleVPC
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W40
            reason: "This egress require to communication on all port to user machine and vpc."
          - id: W5
            reason: "This is required for ec2 to fetch a file from github repo."

  BaffleShieldInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref BaffleShieldRole

  BaffleKeyPair:
    Type: "AWS::EC2::KeyPair"
    Properties:
      KeyName: !Join [ "-", [ !Ref "AWS::StackName", "key-pair" ] ]

  BaffleEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      IamInstanceProfile: !Ref BaffleShieldInstanceProfile
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", ImageId]
      InstanceType: m4.xlarge
      KeyName: !Ref BaffleKeyPair
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref PublicSubnet1
          AssociatePublicIpAddress: true
          GroupSet:
            - !GetAtt BaffleEC2SecurityGroup.GroupId
      UserData:
        !If
        - CreateMultipleKeys
        - Fn::Base64: !Sub |
            #!/bin/bash
            echo "export INIT_PASS='baffle123'" >> /etc/environment
            echo "export USERNAME='${UserEmail}'" >> /etc/environment
            echo "export PASSWORD='$(echo '${UserPassword}' | sed 's/#/\#/g')'" >> /etc/environment
            echo "export KM_AWS_REGION='${AWS::Region}'" >> /etc/environment
            echo "export KM_S3_BUCKET_NAME='${BaffleKeyStorageBucket}'" >> /etc/environment
            echo "export KM_KEK_NAME='${BaffleShield1KeyAlias}'" >> /etc/environment
            echo "export KM_KEK_NAME_1='${BaffleShield2KeyAlias}'" >> /etc/environment
            echo "export EXECUTE_WORKFLOW='${Workflow}'" >> /etc/environment
            source /etc/environment
            # Setup docker
            sudo service docker start >> output.txt 2>&1
            cd /home/ec2-user
            wget https://raw.githubusercontent.com/baffle/baffle-public/master/market-place/baffle-manager-automation/bash-scripts/2.9.3.x/bm-automated-data-proxy.sh
            chmod +x bm-automated-data-proxy.sh >> output.txt 2>&1
            sudo ./bm-automated-data-proxy.sh >> output.txt 2>&1
        - Fn::Base64: !Sub |
            #!/bin/bash
            echo "export INIT_PASS='baffle123'" >> /etc/environment            
            echo "export USERNAME='${UserEmail}'" >> /etc/environment
            echo "export PASSWORD='$(echo '${UserPassword}' | sed 's/#/\#/g')'" >> /etc/environment
            echo "export KM_AWS_REGION='${AWS::Region}'" >> /etc/environment
            echo "export KM_S3_BUCKET_NAME='${BaffleKeyStorageBucket}'" >> /etc/environment
            echo "export KM_KEK_NAME='${BaffleShield1KeyAlias}'" >> /etc/environment
            echo "export EXECUTE_WORKFLOW='${Workflow}'" >> /etc/environment
            source /etc/environment
            # Setup docker
            sudo service docker start >> output.txt 2>&1
            cd /home/ec2-user
            wget https://raw.githubusercontent.com/baffle/baffle-public/master/market-place/baffle-manager-automation/bash-scripts/2.9.3.x/bm-automated-data-proxy.sh
            chmod +x bm-automated-data-proxy.sh >> output.txt 2>&1
            sudo ./bm-automated-data-proxy.sh >> output.txt 2>&1
Outputs:

  StackRegion:
    Description: "Stack Region"
    Value: !Ref "AWS::Region"

  BaffleEC2SecurityGroup:
    Description: "Baffle Service Security Group"
    Value: !Join [ "", [ "https://", !Ref "AWS::Region", ".console.aws.amazon.com/ec2/home?region=",  !Ref "AWS::Region", "#SecurityGroups:search=", !Ref BaffleEC2SecurityGroup ] ]

  BaffleManagerURL:
    Description: "The URL for Baffle Manager"
    Value: !Join [ "", [ "https://", !GetAtt BaffleEC2Instance.PublicIp ] ]

  DataProxyURL:
    Description: "The URL for Data Proxy"
    Value: !Join [ "", [ "https://", !GetAtt BaffleEC2Instance.PublicIp, ":8444" ] ]

  DataProxyHealthCheck:
    Description: "The health check URL for Data Proxy"
    Value: !Join [ "", [ "https://", !GetAtt BaffleEC2Instance.PublicIp, ":8444", "/dataproxy/status" ] ]

  BYOKDataProxyURL:
    Condition: IsAll
    Description: "The URL for BYOK Data Proxy"
    Value: !Join [ "", [ "https://", !GetAtt BaffleEC2Instance.PublicIp, ":8445" ] ]

  BYOKProxyHealthCheck:
    Condition: IsAll
    Description: "The health check URL for BYOK Data Proxy"
    Value: !Join [ "", [ "https://", !GetAtt BaffleEC2Instance.PublicIp, ":8445", "/dataproxy/status" ] ]

  ExtraKEK1Alias:
    Condition: CreateMultipleKeys
    Description: "Extra KEK to be used at workshop for BYOK"
    Value: !Ref BaffleShield3KeyAlias

  DataProxyS3Bucket:
    Description: "The S3 Bucket to store Data"
    Value: !Ref BaffleDataStorageBucket

  DataProxyS3BucketURL:
    Description: "The URL S3 Bucket to store Data"
    Value: !Join [ "", [ "https://", !Ref "AWS::Region", ".console.aws.amazon.com/s3/buckets/", !Ref BaffleDataStorageBucket, "?region=",  !Ref "AWS::Region", "&bucketType=general&tab=objects" ] ]
